/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UnmanagedDevice.Builder.class)
public final class UnmanagedDevice {
    private final String deviceId;

    private final DeviceType deviceType;

    private final String connectedAccountId;

    private final List<UnmanagedDeviceCapabilitiesSupportedItem> capabilitiesSupported;

    private final String workspaceId;

    private final List<UnmanagedDeviceErrorsItem> errors;

    private final List<UnmanagedDeviceWarningsItem> warnings;

    private final OffsetDateTime createdAt;

    private final boolean isManaged;

    private final UnmanagedDeviceProperties properties;

    private final Optional<Boolean> canRemotelyUnlock;

    private final Optional<Boolean> canRemotelyLock;

    private final Optional<Boolean> canProgramOfflineAccessCodes;

    private final Optional<Boolean> canProgramOnlineAccessCodes;

    private final Optional<Boolean> canSimulateRemoval;

    private final Optional<Boolean> canSimulateConnection;

    private final Optional<Boolean> canSimulateDisconnection;

    private final Optional<UnmanagedDeviceDeviceProvider> deviceProvider;

    private final Map<String, Object> additionalProperties;

    private UnmanagedDevice(
            String deviceId,
            DeviceType deviceType,
            String connectedAccountId,
            List<UnmanagedDeviceCapabilitiesSupportedItem> capabilitiesSupported,
            String workspaceId,
            List<UnmanagedDeviceErrorsItem> errors,
            List<UnmanagedDeviceWarningsItem> warnings,
            OffsetDateTime createdAt,
            boolean isManaged,
            UnmanagedDeviceProperties properties,
            Optional<Boolean> canRemotelyUnlock,
            Optional<Boolean> canRemotelyLock,
            Optional<Boolean> canProgramOfflineAccessCodes,
            Optional<Boolean> canProgramOnlineAccessCodes,
            Optional<Boolean> canSimulateRemoval,
            Optional<Boolean> canSimulateConnection,
            Optional<Boolean> canSimulateDisconnection,
            Optional<UnmanagedDeviceDeviceProvider> deviceProvider,
            Map<String, Object> additionalProperties) {
        this.deviceId = deviceId;
        this.deviceType = deviceType;
        this.connectedAccountId = connectedAccountId;
        this.capabilitiesSupported = capabilitiesSupported;
        this.workspaceId = workspaceId;
        this.errors = errors;
        this.warnings = warnings;
        this.createdAt = createdAt;
        this.isManaged = isManaged;
        this.properties = properties;
        this.canRemotelyUnlock = canRemotelyUnlock;
        this.canRemotelyLock = canRemotelyLock;
        this.canProgramOfflineAccessCodes = canProgramOfflineAccessCodes;
        this.canProgramOnlineAccessCodes = canProgramOnlineAccessCodes;
        this.canSimulateRemoval = canSimulateRemoval;
        this.canSimulateConnection = canSimulateConnection;
        this.canSimulateDisconnection = canSimulateDisconnection;
        this.deviceProvider = deviceProvider;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the device.
     */
    @JsonProperty("device_id")
    public String getDeviceId() {
        return deviceId;
    }

    /**
     * @return Type of the device.
     */
    @JsonProperty("device_type")
    public DeviceType getDeviceType() {
        return deviceType;
    }

    /**
     * @return Unique identifier for the account associated with the device.
     */
    @JsonProperty("connected_account_id")
    public String getConnectedAccountId() {
        return connectedAccountId;
    }

    /**
     * @return Collection of capabilities that the device supports when connected to Seam. Values are &quot;access_code,&quot; which indicates that the device can manage and utilize digital PIN codes for secure access; &quot;lock,&quot; which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; &quot;noise_detection,&quot; which indicates that the device supports monitoring and responding to ambient noise levels; &quot;thermostat,&quot; which indicates that the device can regulate and adjust indoor temperatures; and &quot;battery,&quot; which indicates that the device can manage battery life and health.
     */
    @JsonProperty("capabilities_supported")
    public List<UnmanagedDeviceCapabilitiesSupportedItem> getCapabilitiesSupported() {
        return capabilitiesSupported;
    }

    /**
     * @return Unique identifier for the Seam workspace associated with the device.
     */
    @JsonProperty("workspace_id")
    public String getWorkspaceId() {
        return workspaceId;
    }

    /**
     * @return Array of errors associated with the device. Each error object within the array contains two fields: &quot;error_code&quot; and &quot;message.&quot; &quot;error_code&quot; is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. &quot;message&quot; provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.
     */
    @JsonProperty("errors")
    public List<UnmanagedDeviceErrorsItem> getErrors() {
        return errors;
    }

    /**
     * @return Array of warnings associated with the device. Each warning object within the array contains two fields: &quot;warning_code&quot; and &quot;message.&quot; &quot;warning_code&quot; is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. &quot;message&quot; provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.
     */
    @JsonProperty("warnings")
    public List<UnmanagedDeviceWarningsItem> getWarnings() {
        return warnings;
    }

    /**
     * @return Date and time at which the device object was created.
     */
    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("is_managed")
    public boolean getIsManaged() {
        return isManaged;
    }

    @JsonProperty("properties")
    public UnmanagedDeviceProperties getProperties() {
        return properties;
    }

    @JsonProperty("can_remotely_unlock")
    public Optional<Boolean> getCanRemotelyUnlock() {
        return canRemotelyUnlock;
    }

    @JsonProperty("can_remotely_lock")
    public Optional<Boolean> getCanRemotelyLock() {
        return canRemotelyLock;
    }

    @JsonProperty("can_program_offline_access_codes")
    public Optional<Boolean> getCanProgramOfflineAccessCodes() {
        return canProgramOfflineAccessCodes;
    }

    @JsonProperty("can_program_online_access_codes")
    public Optional<Boolean> getCanProgramOnlineAccessCodes() {
        return canProgramOnlineAccessCodes;
    }

    @JsonProperty("can_simulate_removal")
    public Optional<Boolean> getCanSimulateRemoval() {
        return canSimulateRemoval;
    }

    @JsonProperty("can_simulate_connection")
    public Optional<Boolean> getCanSimulateConnection() {
        return canSimulateConnection;
    }

    @JsonProperty("can_simulate_disconnection")
    public Optional<Boolean> getCanSimulateDisconnection() {
        return canSimulateDisconnection;
    }

    @JsonProperty("device_provider")
    public Optional<UnmanagedDeviceDeviceProvider> getDeviceProvider() {
        return deviceProvider;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UnmanagedDevice && equalTo((UnmanagedDevice) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UnmanagedDevice other) {
        return deviceId.equals(other.deviceId)
                && deviceType.equals(other.deviceType)
                && connectedAccountId.equals(other.connectedAccountId)
                && capabilitiesSupported.equals(other.capabilitiesSupported)
                && workspaceId.equals(other.workspaceId)
                && errors.equals(other.errors)
                && warnings.equals(other.warnings)
                && createdAt.equals(other.createdAt)
                && isManaged == other.isManaged
                && properties.equals(other.properties)
                && canRemotelyUnlock.equals(other.canRemotelyUnlock)
                && canRemotelyLock.equals(other.canRemotelyLock)
                && canProgramOfflineAccessCodes.equals(other.canProgramOfflineAccessCodes)
                && canProgramOnlineAccessCodes.equals(other.canProgramOnlineAccessCodes)
                && canSimulateRemoval.equals(other.canSimulateRemoval)
                && canSimulateConnection.equals(other.canSimulateConnection)
                && canSimulateDisconnection.equals(other.canSimulateDisconnection)
                && deviceProvider.equals(other.deviceProvider);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.deviceId,
                this.deviceType,
                this.connectedAccountId,
                this.capabilitiesSupported,
                this.workspaceId,
                this.errors,
                this.warnings,
                this.createdAt,
                this.isManaged,
                this.properties,
                this.canRemotelyUnlock,
                this.canRemotelyLock,
                this.canProgramOfflineAccessCodes,
                this.canProgramOnlineAccessCodes,
                this.canSimulateRemoval,
                this.canSimulateConnection,
                this.canSimulateDisconnection,
                this.deviceProvider);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DeviceIdStage builder() {
        return new Builder();
    }

    public interface DeviceIdStage {
        DeviceTypeStage deviceId(String deviceId);

        Builder from(UnmanagedDevice other);
    }

    public interface DeviceTypeStage {
        ConnectedAccountIdStage deviceType(DeviceType deviceType);
    }

    public interface ConnectedAccountIdStage {
        WorkspaceIdStage connectedAccountId(String connectedAccountId);
    }

    public interface WorkspaceIdStage {
        CreatedAtStage workspaceId(String workspaceId);
    }

    public interface CreatedAtStage {
        IsManagedStage createdAt(OffsetDateTime createdAt);
    }

    public interface IsManagedStage {
        PropertiesStage isManaged(boolean isManaged);
    }

    public interface PropertiesStage {
        _FinalStage properties(UnmanagedDeviceProperties properties);
    }

    public interface _FinalStage {
        UnmanagedDevice build();

        _FinalStage capabilitiesSupported(List<UnmanagedDeviceCapabilitiesSupportedItem> capabilitiesSupported);

        _FinalStage addCapabilitiesSupported(UnmanagedDeviceCapabilitiesSupportedItem capabilitiesSupported);

        _FinalStage addAllCapabilitiesSupported(List<UnmanagedDeviceCapabilitiesSupportedItem> capabilitiesSupported);

        _FinalStage errors(List<UnmanagedDeviceErrorsItem> errors);

        _FinalStage addErrors(UnmanagedDeviceErrorsItem errors);

        _FinalStage addAllErrors(List<UnmanagedDeviceErrorsItem> errors);

        _FinalStage warnings(List<UnmanagedDeviceWarningsItem> warnings);

        _FinalStage addWarnings(UnmanagedDeviceWarningsItem warnings);

        _FinalStage addAllWarnings(List<UnmanagedDeviceWarningsItem> warnings);

        _FinalStage canRemotelyUnlock(Optional<Boolean> canRemotelyUnlock);

        _FinalStage canRemotelyUnlock(Boolean canRemotelyUnlock);

        _FinalStage canRemotelyLock(Optional<Boolean> canRemotelyLock);

        _FinalStage canRemotelyLock(Boolean canRemotelyLock);

        _FinalStage canProgramOfflineAccessCodes(Optional<Boolean> canProgramOfflineAccessCodes);

        _FinalStage canProgramOfflineAccessCodes(Boolean canProgramOfflineAccessCodes);

        _FinalStage canProgramOnlineAccessCodes(Optional<Boolean> canProgramOnlineAccessCodes);

        _FinalStage canProgramOnlineAccessCodes(Boolean canProgramOnlineAccessCodes);

        _FinalStage canSimulateRemoval(Optional<Boolean> canSimulateRemoval);

        _FinalStage canSimulateRemoval(Boolean canSimulateRemoval);

        _FinalStage canSimulateConnection(Optional<Boolean> canSimulateConnection);

        _FinalStage canSimulateConnection(Boolean canSimulateConnection);

        _FinalStage canSimulateDisconnection(Optional<Boolean> canSimulateDisconnection);

        _FinalStage canSimulateDisconnection(Boolean canSimulateDisconnection);

        _FinalStage deviceProvider(Optional<UnmanagedDeviceDeviceProvider> deviceProvider);

        _FinalStage deviceProvider(UnmanagedDeviceDeviceProvider deviceProvider);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements DeviceIdStage,
                    DeviceTypeStage,
                    ConnectedAccountIdStage,
                    WorkspaceIdStage,
                    CreatedAtStage,
                    IsManagedStage,
                    PropertiesStage,
                    _FinalStage {
        private String deviceId;

        private DeviceType deviceType;

        private String connectedAccountId;

        private String workspaceId;

        private OffsetDateTime createdAt;

        private boolean isManaged;

        private UnmanagedDeviceProperties properties;

        private Optional<UnmanagedDeviceDeviceProvider> deviceProvider = Optional.empty();

        private Optional<Boolean> canSimulateDisconnection = Optional.empty();

        private Optional<Boolean> canSimulateConnection = Optional.empty();

        private Optional<Boolean> canSimulateRemoval = Optional.empty();

        private Optional<Boolean> canProgramOnlineAccessCodes = Optional.empty();

        private Optional<Boolean> canProgramOfflineAccessCodes = Optional.empty();

        private Optional<Boolean> canRemotelyLock = Optional.empty();

        private Optional<Boolean> canRemotelyUnlock = Optional.empty();

        private List<UnmanagedDeviceWarningsItem> warnings = new ArrayList<>();

        private List<UnmanagedDeviceErrorsItem> errors = new ArrayList<>();

        private List<UnmanagedDeviceCapabilitiesSupportedItem> capabilitiesSupported = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UnmanagedDevice other) {
            deviceId(other.getDeviceId());
            deviceType(other.getDeviceType());
            connectedAccountId(other.getConnectedAccountId());
            capabilitiesSupported(other.getCapabilitiesSupported());
            workspaceId(other.getWorkspaceId());
            errors(other.getErrors());
            warnings(other.getWarnings());
            createdAt(other.getCreatedAt());
            isManaged(other.getIsManaged());
            properties(other.getProperties());
            canRemotelyUnlock(other.getCanRemotelyUnlock());
            canRemotelyLock(other.getCanRemotelyLock());
            canProgramOfflineAccessCodes(other.getCanProgramOfflineAccessCodes());
            canProgramOnlineAccessCodes(other.getCanProgramOnlineAccessCodes());
            canSimulateRemoval(other.getCanSimulateRemoval());
            canSimulateConnection(other.getCanSimulateConnection());
            canSimulateDisconnection(other.getCanSimulateDisconnection());
            deviceProvider(other.getDeviceProvider());
            return this;
        }

        /**
         * <p>Unique identifier for the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("device_id")
        public DeviceTypeStage deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        /**
         * <p>Type of the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("device_type")
        public ConnectedAccountIdStage deviceType(DeviceType deviceType) {
            this.deviceType = deviceType;
            return this;
        }

        /**
         * <p>Unique identifier for the account associated with the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("connected_account_id")
        public WorkspaceIdStage connectedAccountId(String connectedAccountId) {
            this.connectedAccountId = connectedAccountId;
            return this;
        }

        /**
         * <p>Unique identifier for the Seam workspace associated with the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("workspace_id")
        public CreatedAtStage workspaceId(String workspaceId) {
            this.workspaceId = workspaceId;
            return this;
        }

        /**
         * <p>Date and time at which the device object was created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public IsManagedStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("is_managed")
        public PropertiesStage isManaged(boolean isManaged) {
            this.isManaged = isManaged;
            return this;
        }

        @java.lang.Override
        @JsonSetter("properties")
        public _FinalStage properties(UnmanagedDeviceProperties properties) {
            this.properties = properties;
            return this;
        }

        @java.lang.Override
        public _FinalStage deviceProvider(UnmanagedDeviceDeviceProvider deviceProvider) {
            this.deviceProvider = Optional.of(deviceProvider);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "device_provider", nulls = Nulls.SKIP)
        public _FinalStage deviceProvider(Optional<UnmanagedDeviceDeviceProvider> deviceProvider) {
            this.deviceProvider = deviceProvider;
            return this;
        }

        @java.lang.Override
        public _FinalStage canSimulateDisconnection(Boolean canSimulateDisconnection) {
            this.canSimulateDisconnection = Optional.of(canSimulateDisconnection);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "can_simulate_disconnection", nulls = Nulls.SKIP)
        public _FinalStage canSimulateDisconnection(Optional<Boolean> canSimulateDisconnection) {
            this.canSimulateDisconnection = canSimulateDisconnection;
            return this;
        }

        @java.lang.Override
        public _FinalStage canSimulateConnection(Boolean canSimulateConnection) {
            this.canSimulateConnection = Optional.of(canSimulateConnection);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "can_simulate_connection", nulls = Nulls.SKIP)
        public _FinalStage canSimulateConnection(Optional<Boolean> canSimulateConnection) {
            this.canSimulateConnection = canSimulateConnection;
            return this;
        }

        @java.lang.Override
        public _FinalStage canSimulateRemoval(Boolean canSimulateRemoval) {
            this.canSimulateRemoval = Optional.of(canSimulateRemoval);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "can_simulate_removal", nulls = Nulls.SKIP)
        public _FinalStage canSimulateRemoval(Optional<Boolean> canSimulateRemoval) {
            this.canSimulateRemoval = canSimulateRemoval;
            return this;
        }

        @java.lang.Override
        public _FinalStage canProgramOnlineAccessCodes(Boolean canProgramOnlineAccessCodes) {
            this.canProgramOnlineAccessCodes = Optional.of(canProgramOnlineAccessCodes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "can_program_online_access_codes", nulls = Nulls.SKIP)
        public _FinalStage canProgramOnlineAccessCodes(Optional<Boolean> canProgramOnlineAccessCodes) {
            this.canProgramOnlineAccessCodes = canProgramOnlineAccessCodes;
            return this;
        }

        @java.lang.Override
        public _FinalStage canProgramOfflineAccessCodes(Boolean canProgramOfflineAccessCodes) {
            this.canProgramOfflineAccessCodes = Optional.of(canProgramOfflineAccessCodes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "can_program_offline_access_codes", nulls = Nulls.SKIP)
        public _FinalStage canProgramOfflineAccessCodes(Optional<Boolean> canProgramOfflineAccessCodes) {
            this.canProgramOfflineAccessCodes = canProgramOfflineAccessCodes;
            return this;
        }

        @java.lang.Override
        public _FinalStage canRemotelyLock(Boolean canRemotelyLock) {
            this.canRemotelyLock = Optional.of(canRemotelyLock);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "can_remotely_lock", nulls = Nulls.SKIP)
        public _FinalStage canRemotelyLock(Optional<Boolean> canRemotelyLock) {
            this.canRemotelyLock = canRemotelyLock;
            return this;
        }

        @java.lang.Override
        public _FinalStage canRemotelyUnlock(Boolean canRemotelyUnlock) {
            this.canRemotelyUnlock = Optional.of(canRemotelyUnlock);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "can_remotely_unlock", nulls = Nulls.SKIP)
        public _FinalStage canRemotelyUnlock(Optional<Boolean> canRemotelyUnlock) {
            this.canRemotelyUnlock = canRemotelyUnlock;
            return this;
        }

        /**
         * <p>Array of warnings associated with the device. Each warning object within the array contains two fields: &quot;warning_code&quot; and &quot;message.&quot; &quot;warning_code&quot; is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. &quot;message&quot; provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllWarnings(List<UnmanagedDeviceWarningsItem> warnings) {
            this.warnings.addAll(warnings);
            return this;
        }

        /**
         * <p>Array of warnings associated with the device. Each warning object within the array contains two fields: &quot;warning_code&quot; and &quot;message.&quot; &quot;warning_code&quot; is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. &quot;message&quot; provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addWarnings(UnmanagedDeviceWarningsItem warnings) {
            this.warnings.add(warnings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "warnings", nulls = Nulls.SKIP)
        public _FinalStage warnings(List<UnmanagedDeviceWarningsItem> warnings) {
            this.warnings.clear();
            this.warnings.addAll(warnings);
            return this;
        }

        /**
         * <p>Array of errors associated with the device. Each error object within the array contains two fields: &quot;error_code&quot; and &quot;message.&quot; &quot;error_code&quot; is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. &quot;message&quot; provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllErrors(List<UnmanagedDeviceErrorsItem> errors) {
            this.errors.addAll(errors);
            return this;
        }

        /**
         * <p>Array of errors associated with the device. Each error object within the array contains two fields: &quot;error_code&quot; and &quot;message.&quot; &quot;error_code&quot; is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. &quot;message&quot; provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addErrors(UnmanagedDeviceErrorsItem errors) {
            this.errors.add(errors);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public _FinalStage errors(List<UnmanagedDeviceErrorsItem> errors) {
            this.errors.clear();
            this.errors.addAll(errors);
            return this;
        }

        /**
         * <p>Collection of capabilities that the device supports when connected to Seam. Values are &quot;access_code,&quot; which indicates that the device can manage and utilize digital PIN codes for secure access; &quot;lock,&quot; which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; &quot;noise_detection,&quot; which indicates that the device supports monitoring and responding to ambient noise levels; &quot;thermostat,&quot; which indicates that the device can regulate and adjust indoor temperatures; and &quot;battery,&quot; which indicates that the device can manage battery life and health.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllCapabilitiesSupported(
                List<UnmanagedDeviceCapabilitiesSupportedItem> capabilitiesSupported) {
            this.capabilitiesSupported.addAll(capabilitiesSupported);
            return this;
        }

        /**
         * <p>Collection of capabilities that the device supports when connected to Seam. Values are &quot;access_code,&quot; which indicates that the device can manage and utilize digital PIN codes for secure access; &quot;lock,&quot; which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; &quot;noise_detection,&quot; which indicates that the device supports monitoring and responding to ambient noise levels; &quot;thermostat,&quot; which indicates that the device can regulate and adjust indoor temperatures; and &quot;battery,&quot; which indicates that the device can manage battery life and health.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addCapabilitiesSupported(UnmanagedDeviceCapabilitiesSupportedItem capabilitiesSupported) {
            this.capabilitiesSupported.add(capabilitiesSupported);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "capabilities_supported", nulls = Nulls.SKIP)
        public _FinalStage capabilitiesSupported(List<UnmanagedDeviceCapabilitiesSupportedItem> capabilitiesSupported) {
            this.capabilitiesSupported.clear();
            this.capabilitiesSupported.addAll(capabilitiesSupported);
            return this;
        }

        @java.lang.Override
        public UnmanagedDevice build() {
            return new UnmanagedDevice(
                    deviceId,
                    deviceType,
                    connectedAccountId,
                    capabilitiesSupported,
                    workspaceId,
                    errors,
                    warnings,
                    createdAt,
                    isManaged,
                    properties,
                    canRemotelyUnlock,
                    canRemotelyLock,
                    canProgramOfflineAccessCodes,
                    canProgramOnlineAccessCodes,
                    canSimulateRemoval,
                    canSimulateConnection,
                    canSimulateDisconnection,
                    deviceProvider,
                    additionalProperties);
        }
    }
}
