/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PhoneLocation.Builder.class)
public final class PhoneLocation {
    private final Optional<String> locationName;

    private final Optional<String> timezone;

    private final Map<String, Object> additionalProperties;

    private PhoneLocation(
            Optional<String> locationName, Optional<String> timezone, Map<String, Object> additionalProperties) {
        this.locationName = locationName;
        this.timezone = timezone;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Name of the device location.
     */
    @JsonProperty("location_name")
    public Optional<String> getLocationName() {
        return locationName;
    }

    /**
     * @return Time zone of the device location.
     */
    @JsonProperty("timezone")
    public Optional<String> getTimezone() {
        return timezone;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PhoneLocation && equalTo((PhoneLocation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PhoneLocation other) {
        return locationName.equals(other.locationName) && timezone.equals(other.timezone);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationName, this.timezone);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> locationName = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PhoneLocation other) {
            locationName(other.getLocationName());
            timezone(other.getTimezone());
            return this;
        }

        @JsonSetter(value = "location_name", nulls = Nulls.SKIP)
        public Builder locationName(Optional<String> locationName) {
            this.locationName = locationName;
            return this;
        }

        public Builder locationName(String locationName) {
            this.locationName = Optional.of(locationName);
            return this;
        }

        @JsonSetter(value = "timezone", nulls = Nulls.SKIP)
        public Builder timezone(Optional<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            this.timezone = Optional.of(timezone);
            return this;
        }

        public PhoneLocation build() {
            return new PhoneLocation(locationName, timezone, additionalProperties);
        }
    }
}
