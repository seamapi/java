/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DevicePropertiesTedeeMetadata.Builder.class)
public final class DevicePropertiesTedeeMetadata {
    private final double deviceId;

    private final String serialNumber;

    private final String deviceName;

    private final String deviceModel;

    private final double bridgeId;

    private final String bridgeName;

    private final Optional<Double> keypadId;

    private final Map<String, Object> additionalProperties;

    private DevicePropertiesTedeeMetadata(
            double deviceId,
            String serialNumber,
            String deviceName,
            String deviceModel,
            double bridgeId,
            String bridgeName,
            Optional<Double> keypadId,
            Map<String, Object> additionalProperties) {
        this.deviceId = deviceId;
        this.serialNumber = serialNumber;
        this.deviceName = deviceName;
        this.deviceModel = deviceModel;
        this.bridgeId = bridgeId;
        this.bridgeName = bridgeName;
        this.keypadId = keypadId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("device_id")
    public double getDeviceId() {
        return deviceId;
    }

    @JsonProperty("serial_number")
    public String getSerialNumber() {
        return serialNumber;
    }

    @JsonProperty("device_name")
    public String getDeviceName() {
        return deviceName;
    }

    @JsonProperty("device_model")
    public String getDeviceModel() {
        return deviceModel;
    }

    @JsonProperty("bridge_id")
    public double getBridgeId() {
        return bridgeId;
    }

    @JsonProperty("bridge_name")
    public String getBridgeName() {
        return bridgeName;
    }

    @JsonProperty("keypad_id")
    public Optional<Double> getKeypadId() {
        return keypadId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DevicePropertiesTedeeMetadata && equalTo((DevicePropertiesTedeeMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DevicePropertiesTedeeMetadata other) {
        return deviceId == other.deviceId
                && serialNumber.equals(other.serialNumber)
                && deviceName.equals(other.deviceName)
                && deviceModel.equals(other.deviceModel)
                && bridgeId == other.bridgeId
                && bridgeName.equals(other.bridgeName)
                && keypadId.equals(other.keypadId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.deviceId,
                this.serialNumber,
                this.deviceName,
                this.deviceModel,
                this.bridgeId,
                this.bridgeName,
                this.keypadId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DeviceIdStage builder() {
        return new Builder();
    }

    public interface DeviceIdStage {
        SerialNumberStage deviceId(double deviceId);

        Builder from(DevicePropertiesTedeeMetadata other);
    }

    public interface SerialNumberStage {
        DeviceNameStage serialNumber(String serialNumber);
    }

    public interface DeviceNameStage {
        DeviceModelStage deviceName(String deviceName);
    }

    public interface DeviceModelStage {
        BridgeIdStage deviceModel(String deviceModel);
    }

    public interface BridgeIdStage {
        BridgeNameStage bridgeId(double bridgeId);
    }

    public interface BridgeNameStage {
        _FinalStage bridgeName(String bridgeName);
    }

    public interface _FinalStage {
        DevicePropertiesTedeeMetadata build();

        _FinalStage keypadId(Optional<Double> keypadId);

        _FinalStage keypadId(Double keypadId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements DeviceIdStage,
                    SerialNumberStage,
                    DeviceNameStage,
                    DeviceModelStage,
                    BridgeIdStage,
                    BridgeNameStage,
                    _FinalStage {
        private double deviceId;

        private String serialNumber;

        private String deviceName;

        private String deviceModel;

        private double bridgeId;

        private String bridgeName;

        private Optional<Double> keypadId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DevicePropertiesTedeeMetadata other) {
            deviceId(other.getDeviceId());
            serialNumber(other.getSerialNumber());
            deviceName(other.getDeviceName());
            deviceModel(other.getDeviceModel());
            bridgeId(other.getBridgeId());
            bridgeName(other.getBridgeName());
            keypadId(other.getKeypadId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("device_id")
        public SerialNumberStage deviceId(double deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("serial_number")
        public DeviceNameStage serialNumber(String serialNumber) {
            this.serialNumber = serialNumber;
            return this;
        }

        @java.lang.Override
        @JsonSetter("device_name")
        public DeviceModelStage deviceName(String deviceName) {
            this.deviceName = deviceName;
            return this;
        }

        @java.lang.Override
        @JsonSetter("device_model")
        public BridgeIdStage deviceModel(String deviceModel) {
            this.deviceModel = deviceModel;
            return this;
        }

        @java.lang.Override
        @JsonSetter("bridge_id")
        public BridgeNameStage bridgeId(double bridgeId) {
            this.bridgeId = bridgeId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("bridge_name")
        public _FinalStage bridgeName(String bridgeName) {
            this.bridgeName = bridgeName;
            return this;
        }

        @java.lang.Override
        public _FinalStage keypadId(Double keypadId) {
            this.keypadId = Optional.of(keypadId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "keypad_id", nulls = Nulls.SKIP)
        public _FinalStage keypadId(Optional<Double> keypadId) {
            this.keypadId = keypadId;
            return this;
        }

        @java.lang.Override
        public DevicePropertiesTedeeMetadata build() {
            return new DevicePropertiesTedeeMetadata(
                    deviceId,
                    serialNumber,
                    deviceName,
                    deviceModel,
                    bridgeId,
                    bridgeName,
                    keypadId,
                    additionalProperties);
        }
    }
}
