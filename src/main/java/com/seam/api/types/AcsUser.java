/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AcsUser.Builder.class)
public final class AcsUser {
    private final String acsUserId;

    private final String acsSystemId;

    private final Optional<String> hidAcsSystemId;

    private final String workspaceId;

    private final OffsetDateTime createdAt;

    private final String displayName;

    private final Optional<AcsUserExternalType> externalType;

    private final Optional<String> externalTypeDisplayName;

    private final boolean isSuspended;

    private final Optional<AcsUserAccessSchedule> accessSchedule;

    private final Optional<String> userIdentityId;

    private final Optional<String> userIdentityFullName;

    private final Optional<String> userIdentityEmailAddress;

    private final Optional<String> userIdentityPhoneNumber;

    private final Optional<String> fullName;

    private final Optional<String> email;

    private final Optional<String> emailAddress;

    private final Optional<String> phoneNumber;

    private final Map<String, Object> additionalProperties;

    private AcsUser(
            String acsUserId,
            String acsSystemId,
            Optional<String> hidAcsSystemId,
            String workspaceId,
            OffsetDateTime createdAt,
            String displayName,
            Optional<AcsUserExternalType> externalType,
            Optional<String> externalTypeDisplayName,
            boolean isSuspended,
            Optional<AcsUserAccessSchedule> accessSchedule,
            Optional<String> userIdentityId,
            Optional<String> userIdentityFullName,
            Optional<String> userIdentityEmailAddress,
            Optional<String> userIdentityPhoneNumber,
            Optional<String> fullName,
            Optional<String> email,
            Optional<String> emailAddress,
            Optional<String> phoneNumber,
            Map<String, Object> additionalProperties) {
        this.acsUserId = acsUserId;
        this.acsSystemId = acsSystemId;
        this.hidAcsSystemId = hidAcsSystemId;
        this.workspaceId = workspaceId;
        this.createdAt = createdAt;
        this.displayName = displayName;
        this.externalType = externalType;
        this.externalTypeDisplayName = externalTypeDisplayName;
        this.isSuspended = isSuspended;
        this.accessSchedule = accessSchedule;
        this.userIdentityId = userIdentityId;
        this.userIdentityFullName = userIdentityFullName;
        this.userIdentityEmailAddress = userIdentityEmailAddress;
        this.userIdentityPhoneNumber = userIdentityPhoneNumber;
        this.fullName = fullName;
        this.email = email;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("acs_user_id")
    public String getAcsUserId() {
        return acsUserId;
    }

    @JsonProperty("acs_system_id")
    public String getAcsSystemId() {
        return acsSystemId;
    }

    @JsonProperty("hid_acs_system_id")
    public Optional<String> getHidAcsSystemId() {
        return hidAcsSystemId;
    }

    @JsonProperty("workspace_id")
    public String getWorkspaceId() {
        return workspaceId;
    }

    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("display_name")
    public String getDisplayName() {
        return displayName;
    }

    @JsonProperty("external_type")
    public Optional<AcsUserExternalType> getExternalType() {
        return externalType;
    }

    @JsonProperty("external_type_display_name")
    public Optional<String> getExternalTypeDisplayName() {
        return externalTypeDisplayName;
    }

    @JsonProperty("is_suspended")
    public boolean getIsSuspended() {
        return isSuspended;
    }

    @JsonProperty("access_schedule")
    public Optional<AcsUserAccessSchedule> getAccessSchedule() {
        return accessSchedule;
    }

    @JsonProperty("user_identity_id")
    public Optional<String> getUserIdentityId() {
        return userIdentityId;
    }

    @JsonProperty("user_identity_full_name")
    public Optional<String> getUserIdentityFullName() {
        return userIdentityFullName;
    }

    @JsonProperty("user_identity_email_address")
    public Optional<String> getUserIdentityEmailAddress() {
        return userIdentityEmailAddress;
    }

    @JsonProperty("user_identity_phone_number")
    public Optional<String> getUserIdentityPhoneNumber() {
        return userIdentityPhoneNumber;
    }

    @JsonProperty("full_name")
    public Optional<String> getFullName() {
        return fullName;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("email_address")
    public Optional<String> getEmailAddress() {
        return emailAddress;
    }

    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AcsUser && equalTo((AcsUser) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AcsUser other) {
        return acsUserId.equals(other.acsUserId)
                && acsSystemId.equals(other.acsSystemId)
                && hidAcsSystemId.equals(other.hidAcsSystemId)
                && workspaceId.equals(other.workspaceId)
                && createdAt.equals(other.createdAt)
                && displayName.equals(other.displayName)
                && externalType.equals(other.externalType)
                && externalTypeDisplayName.equals(other.externalTypeDisplayName)
                && isSuspended == other.isSuspended
                && accessSchedule.equals(other.accessSchedule)
                && userIdentityId.equals(other.userIdentityId)
                && userIdentityFullName.equals(other.userIdentityFullName)
                && userIdentityEmailAddress.equals(other.userIdentityEmailAddress)
                && userIdentityPhoneNumber.equals(other.userIdentityPhoneNumber)
                && fullName.equals(other.fullName)
                && email.equals(other.email)
                && emailAddress.equals(other.emailAddress)
                && phoneNumber.equals(other.phoneNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.acsUserId,
                this.acsSystemId,
                this.hidAcsSystemId,
                this.workspaceId,
                this.createdAt,
                this.displayName,
                this.externalType,
                this.externalTypeDisplayName,
                this.isSuspended,
                this.accessSchedule,
                this.userIdentityId,
                this.userIdentityFullName,
                this.userIdentityEmailAddress,
                this.userIdentityPhoneNumber,
                this.fullName,
                this.email,
                this.emailAddress,
                this.phoneNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AcsUserIdStage builder() {
        return new Builder();
    }

    public interface AcsUserIdStage {
        AcsSystemIdStage acsUserId(String acsUserId);

        Builder from(AcsUser other);
    }

    public interface AcsSystemIdStage {
        WorkspaceIdStage acsSystemId(String acsSystemId);
    }

    public interface WorkspaceIdStage {
        CreatedAtStage workspaceId(String workspaceId);
    }

    public interface CreatedAtStage {
        DisplayNameStage createdAt(OffsetDateTime createdAt);
    }

    public interface DisplayNameStage {
        IsSuspendedStage displayName(String displayName);
    }

    public interface IsSuspendedStage {
        _FinalStage isSuspended(boolean isSuspended);
    }

    public interface _FinalStage {
        AcsUser build();

        _FinalStage hidAcsSystemId(Optional<String> hidAcsSystemId);

        _FinalStage hidAcsSystemId(String hidAcsSystemId);

        _FinalStage externalType(Optional<AcsUserExternalType> externalType);

        _FinalStage externalType(AcsUserExternalType externalType);

        _FinalStage externalTypeDisplayName(Optional<String> externalTypeDisplayName);

        _FinalStage externalTypeDisplayName(String externalTypeDisplayName);

        _FinalStage accessSchedule(Optional<AcsUserAccessSchedule> accessSchedule);

        _FinalStage accessSchedule(AcsUserAccessSchedule accessSchedule);

        _FinalStage userIdentityId(Optional<String> userIdentityId);

        _FinalStage userIdentityId(String userIdentityId);

        _FinalStage userIdentityFullName(Optional<String> userIdentityFullName);

        _FinalStage userIdentityFullName(String userIdentityFullName);

        _FinalStage userIdentityEmailAddress(Optional<String> userIdentityEmailAddress);

        _FinalStage userIdentityEmailAddress(String userIdentityEmailAddress);

        _FinalStage userIdentityPhoneNumber(Optional<String> userIdentityPhoneNumber);

        _FinalStage userIdentityPhoneNumber(String userIdentityPhoneNumber);

        _FinalStage fullName(Optional<String> fullName);

        _FinalStage fullName(String fullName);

        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);

        _FinalStage emailAddress(Optional<String> emailAddress);

        _FinalStage emailAddress(String emailAddress);

        _FinalStage phoneNumber(Optional<String> phoneNumber);

        _FinalStage phoneNumber(String phoneNumber);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AcsUserIdStage,
                    AcsSystemIdStage,
                    WorkspaceIdStage,
                    CreatedAtStage,
                    DisplayNameStage,
                    IsSuspendedStage,
                    _FinalStage {
        private String acsUserId;

        private String acsSystemId;

        private String workspaceId;

        private OffsetDateTime createdAt;

        private String displayName;

        private boolean isSuspended;

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> emailAddress = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> fullName = Optional.empty();

        private Optional<String> userIdentityPhoneNumber = Optional.empty();

        private Optional<String> userIdentityEmailAddress = Optional.empty();

        private Optional<String> userIdentityFullName = Optional.empty();

        private Optional<String> userIdentityId = Optional.empty();

        private Optional<AcsUserAccessSchedule> accessSchedule = Optional.empty();

        private Optional<String> externalTypeDisplayName = Optional.empty();

        private Optional<AcsUserExternalType> externalType = Optional.empty();

        private Optional<String> hidAcsSystemId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AcsUser other) {
            acsUserId(other.getAcsUserId());
            acsSystemId(other.getAcsSystemId());
            hidAcsSystemId(other.getHidAcsSystemId());
            workspaceId(other.getWorkspaceId());
            createdAt(other.getCreatedAt());
            displayName(other.getDisplayName());
            externalType(other.getExternalType());
            externalTypeDisplayName(other.getExternalTypeDisplayName());
            isSuspended(other.getIsSuspended());
            accessSchedule(other.getAccessSchedule());
            userIdentityId(other.getUserIdentityId());
            userIdentityFullName(other.getUserIdentityFullName());
            userIdentityEmailAddress(other.getUserIdentityEmailAddress());
            userIdentityPhoneNumber(other.getUserIdentityPhoneNumber());
            fullName(other.getFullName());
            email(other.getEmail());
            emailAddress(other.getEmailAddress());
            phoneNumber(other.getPhoneNumber());
            return this;
        }

        @java.lang.Override
        @JsonSetter("acs_user_id")
        public AcsSystemIdStage acsUserId(String acsUserId) {
            this.acsUserId = acsUserId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("acs_system_id")
        public WorkspaceIdStage acsSystemId(String acsSystemId) {
            this.acsSystemId = acsSystemId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("workspace_id")
        public CreatedAtStage workspaceId(String workspaceId) {
            this.workspaceId = workspaceId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public DisplayNameStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("display_name")
        public IsSuspendedStage displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        @java.lang.Override
        @JsonSetter("is_suspended")
        public _FinalStage isSuspended(boolean isSuspended) {
            this.isSuspended = isSuspended;
            return this;
        }

        @java.lang.Override
        public _FinalStage phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.of(phoneNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public _FinalStage phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage emailAddress(String emailAddress) {
            this.emailAddress = Optional.of(emailAddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "email_address", nulls = Nulls.SKIP)
        public _FinalStage emailAddress(Optional<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        @java.lang.Override
        public _FinalStage email(String email) {
            this.email = Optional.of(email);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        public _FinalStage fullName(String fullName) {
            this.fullName = Optional.of(fullName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "full_name", nulls = Nulls.SKIP)
        public _FinalStage fullName(Optional<String> fullName) {
            this.fullName = fullName;
            return this;
        }

        @java.lang.Override
        public _FinalStage userIdentityPhoneNumber(String userIdentityPhoneNumber) {
            this.userIdentityPhoneNumber = Optional.of(userIdentityPhoneNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "user_identity_phone_number", nulls = Nulls.SKIP)
        public _FinalStage userIdentityPhoneNumber(Optional<String> userIdentityPhoneNumber) {
            this.userIdentityPhoneNumber = userIdentityPhoneNumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage userIdentityEmailAddress(String userIdentityEmailAddress) {
            this.userIdentityEmailAddress = Optional.of(userIdentityEmailAddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "user_identity_email_address", nulls = Nulls.SKIP)
        public _FinalStage userIdentityEmailAddress(Optional<String> userIdentityEmailAddress) {
            this.userIdentityEmailAddress = userIdentityEmailAddress;
            return this;
        }

        @java.lang.Override
        public _FinalStage userIdentityFullName(String userIdentityFullName) {
            this.userIdentityFullName = Optional.of(userIdentityFullName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "user_identity_full_name", nulls = Nulls.SKIP)
        public _FinalStage userIdentityFullName(Optional<String> userIdentityFullName) {
            this.userIdentityFullName = userIdentityFullName;
            return this;
        }

        @java.lang.Override
        public _FinalStage userIdentityId(String userIdentityId) {
            this.userIdentityId = Optional.of(userIdentityId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "user_identity_id", nulls = Nulls.SKIP)
        public _FinalStage userIdentityId(Optional<String> userIdentityId) {
            this.userIdentityId = userIdentityId;
            return this;
        }

        @java.lang.Override
        public _FinalStage accessSchedule(AcsUserAccessSchedule accessSchedule) {
            this.accessSchedule = Optional.of(accessSchedule);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "access_schedule", nulls = Nulls.SKIP)
        public _FinalStage accessSchedule(Optional<AcsUserAccessSchedule> accessSchedule) {
            this.accessSchedule = accessSchedule;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalTypeDisplayName(String externalTypeDisplayName) {
            this.externalTypeDisplayName = Optional.of(externalTypeDisplayName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "external_type_display_name", nulls = Nulls.SKIP)
        public _FinalStage externalTypeDisplayName(Optional<String> externalTypeDisplayName) {
            this.externalTypeDisplayName = externalTypeDisplayName;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalType(AcsUserExternalType externalType) {
            this.externalType = Optional.of(externalType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "external_type", nulls = Nulls.SKIP)
        public _FinalStage externalType(Optional<AcsUserExternalType> externalType) {
            this.externalType = externalType;
            return this;
        }

        @java.lang.Override
        public _FinalStage hidAcsSystemId(String hidAcsSystemId) {
            this.hidAcsSystemId = Optional.of(hidAcsSystemId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hid_acs_system_id", nulls = Nulls.SKIP)
        public _FinalStage hidAcsSystemId(Optional<String> hidAcsSystemId) {
            this.hidAcsSystemId = hidAcsSystemId;
            return this;
        }

        @java.lang.Override
        public AcsUser build() {
            return new AcsUser(
                    acsUserId,
                    acsSystemId,
                    hidAcsSystemId,
                    workspaceId,
                    createdAt,
                    displayName,
                    externalType,
                    externalTypeDisplayName,
                    isSuspended,
                    accessSchedule,
                    userIdentityId,
                    userIdentityFullName,
                    userIdentityEmailAddress,
                    userIdentityPhoneNumber,
                    fullName,
                    email,
                    emailAddress,
                    phoneNumber,
                    additionalProperties);
        }
    }
}
