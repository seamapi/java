/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.useridentities.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import com.seam.api.types.UserIdentity;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserIdentitiesListResponse.Builder.class)
public final class UserIdentitiesListResponse {
    private final List<UserIdentity> userIdentities;

    private final boolean ok;

    private final Map<String, Object> additionalProperties;

    private UserIdentitiesListResponse(
            List<UserIdentity> userIdentities, boolean ok, Map<String, Object> additionalProperties) {
        this.userIdentities = userIdentities;
        this.ok = ok;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("user_identities")
    public List<UserIdentity> getUserIdentities() {
        return userIdentities;
    }

    @JsonProperty("ok")
    public boolean getOk() {
        return ok;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserIdentitiesListResponse && equalTo((UserIdentitiesListResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserIdentitiesListResponse other) {
        return userIdentities.equals(other.userIdentities) && ok == other.ok;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userIdentities, this.ok);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OkStage builder() {
        return new Builder();
    }

    public interface OkStage {
        _FinalStage ok(boolean ok);

        Builder from(UserIdentitiesListResponse other);
    }

    public interface _FinalStage {
        UserIdentitiesListResponse build();

        _FinalStage userIdentities(List<UserIdentity> userIdentities);

        _FinalStage addUserIdentities(UserIdentity userIdentities);

        _FinalStage addAllUserIdentities(List<UserIdentity> userIdentities);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OkStage, _FinalStage {
        private boolean ok;

        private List<UserIdentity> userIdentities = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UserIdentitiesListResponse other) {
            userIdentities(other.getUserIdentities());
            ok(other.getOk());
            return this;
        }

        @java.lang.Override
        @JsonSetter("ok")
        public _FinalStage ok(boolean ok) {
            this.ok = ok;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllUserIdentities(List<UserIdentity> userIdentities) {
            this.userIdentities.addAll(userIdentities);
            return this;
        }

        @java.lang.Override
        public _FinalStage addUserIdentities(UserIdentity userIdentities) {
            this.userIdentities.add(userIdentities);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "user_identities", nulls = Nulls.SKIP)
        public _FinalStage userIdentities(List<UserIdentity> userIdentities) {
            this.userIdentities.clear();
            this.userIdentities.addAll(userIdentities);
            return this;
        }

        @java.lang.Override
        public UserIdentitiesListResponse build() {
            return new UserIdentitiesListResponse(userIdentities, ok, additionalProperties);
        }
    }
}
