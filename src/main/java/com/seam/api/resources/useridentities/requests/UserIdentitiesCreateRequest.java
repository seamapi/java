/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.useridentities.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserIdentitiesCreateRequest.Builder.class)
public final class UserIdentitiesCreateRequest {
    private final Optional<String> userIdentityKey;

    private final Optional<String> emailAddress;

    private final Optional<String> phoneNumber;

    private final Optional<String> fullName;

    private final Map<String, Object> additionalProperties;

    private UserIdentitiesCreateRequest(
            Optional<String> userIdentityKey,
            Optional<String> emailAddress,
            Optional<String> phoneNumber,
            Optional<String> fullName,
            Map<String, Object> additionalProperties) {
        this.userIdentityKey = userIdentityKey;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.fullName = fullName;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("user_identity_key")
    public Optional<String> getUserIdentityKey() {
        return userIdentityKey;
    }

    @JsonProperty("email_address")
    public Optional<String> getEmailAddress() {
        return emailAddress;
    }

    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("full_name")
    public Optional<String> getFullName() {
        return fullName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserIdentitiesCreateRequest && equalTo((UserIdentitiesCreateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserIdentitiesCreateRequest other) {
        return userIdentityKey.equals(other.userIdentityKey)
                && emailAddress.equals(other.emailAddress)
                && phoneNumber.equals(other.phoneNumber)
                && fullName.equals(other.fullName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userIdentityKey, this.emailAddress, this.phoneNumber, this.fullName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> userIdentityKey = Optional.empty();

        private Optional<String> emailAddress = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> fullName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserIdentitiesCreateRequest other) {
            userIdentityKey(other.getUserIdentityKey());
            emailAddress(other.getEmailAddress());
            phoneNumber(other.getPhoneNumber());
            fullName(other.getFullName());
            return this;
        }

        @JsonSetter(value = "user_identity_key", nulls = Nulls.SKIP)
        public Builder userIdentityKey(Optional<String> userIdentityKey) {
            this.userIdentityKey = userIdentityKey;
            return this;
        }

        public Builder userIdentityKey(String userIdentityKey) {
            this.userIdentityKey = Optional.of(userIdentityKey);
            return this;
        }

        @JsonSetter(value = "email_address", nulls = Nulls.SKIP)
        public Builder emailAddress(Optional<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Optional.of(emailAddress);
            return this;
        }

        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.of(phoneNumber);
            return this;
        }

        @JsonSetter(value = "full_name", nulls = Nulls.SKIP)
        public Builder fullName(Optional<String> fullName) {
            this.fullName = fullName;
            return this;
        }

        public Builder fullName(String fullName) {
            this.fullName = Optional.of(fullName);
            return this;
        }

        public UserIdentitiesCreateRequest build() {
            return new UserIdentitiesCreateRequest(
                    userIdentityKey, emailAddress, phoneNumber, fullName, additionalProperties);
        }
    }
}
