/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.useridentities.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserIdentitiesListRequest.Builder.class)
public final class UserIdentitiesListRequest {
    private final Optional<String> credentialManagerAcsSystemId;

    private final Map<String, Object> additionalProperties;

    private UserIdentitiesListRequest(
            Optional<String> credentialManagerAcsSystemId, Map<String, Object> additionalProperties) {
        this.credentialManagerAcsSystemId = credentialManagerAcsSystemId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("credential_manager_acs_system_id")
    public Optional<String> getCredentialManagerAcsSystemId() {
        return credentialManagerAcsSystemId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserIdentitiesListRequest && equalTo((UserIdentitiesListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserIdentitiesListRequest other) {
        return credentialManagerAcsSystemId.equals(other.credentialManagerAcsSystemId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.credentialManagerAcsSystemId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> credentialManagerAcsSystemId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserIdentitiesListRequest other) {
            credentialManagerAcsSystemId(other.getCredentialManagerAcsSystemId());
            return this;
        }

        @JsonSetter(value = "credential_manager_acs_system_id", nulls = Nulls.SKIP)
        public Builder credentialManagerAcsSystemId(Optional<String> credentialManagerAcsSystemId) {
            this.credentialManagerAcsSystemId = credentialManagerAcsSystemId;
            return this;
        }

        public Builder credentialManagerAcsSystemId(String credentialManagerAcsSystemId) {
            this.credentialManagerAcsSystemId = Optional.of(credentialManagerAcsSystemId);
            return this;
        }

        public UserIdentitiesListRequest build() {
            return new UserIdentitiesListRequest(credentialManagerAcsSystemId, additionalProperties);
        }
    }
}
