/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import com.seam.api.types.Event;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EventsListResponse.Builder.class)
public final class EventsListResponse {
    private final List<Event> events;

    private final boolean ok;

    private final Map<String, Object> additionalProperties;

    private EventsListResponse(List<Event> events, boolean ok, Map<String, Object> additionalProperties) {
        this.events = events;
        this.ok = ok;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("events")
    public List<Event> getEvents() {
        return events;
    }

    @JsonProperty("ok")
    public boolean getOk() {
        return ok;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EventsListResponse && equalTo((EventsListResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EventsListResponse other) {
        return events.equals(other.events) && ok == other.ok;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.events, this.ok);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OkStage builder() {
        return new Builder();
    }

    public interface OkStage {
        _FinalStage ok(boolean ok);

        Builder from(EventsListResponse other);
    }

    public interface _FinalStage {
        EventsListResponse build();

        _FinalStage events(List<Event> events);

        _FinalStage addEvents(Event events);

        _FinalStage addAllEvents(List<Event> events);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OkStage, _FinalStage {
        private boolean ok;

        private List<Event> events = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EventsListResponse other) {
            events(other.getEvents());
            ok(other.getOk());
            return this;
        }

        @java.lang.Override
        @JsonSetter("ok")
        public _FinalStage ok(boolean ok) {
            this.ok = ok;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEvents(List<Event> events) {
            this.events.addAll(events);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEvents(Event events) {
            this.events.add(events);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "events", nulls = Nulls.SKIP)
        public _FinalStage events(List<Event> events) {
            this.events.clear();
            this.events.addAll(events);
            return this;
        }

        @java.lang.Override
        public EventsListResponse build() {
            return new EventsListResponse(events, ok, additionalProperties);
        }
    }
}
