/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.connectwebviews.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import com.seam.api.resources.connectwebviews.types.ConnectWebviewsListRequestCustomMetadataHasValue;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ConnectWebviewsListRequest.Builder.class)
public final class ConnectWebviewsListRequest {
    private final Optional<String> userIdentifierKey;

    private final Optional<Map<String, ConnectWebviewsListRequestCustomMetadataHasValue>> customMetadataHas;

    private final Optional<Double> limit;

    private final Map<String, Object> additionalProperties;

    private ConnectWebviewsListRequest(
            Optional<String> userIdentifierKey,
            Optional<Map<String, ConnectWebviewsListRequestCustomMetadataHasValue>> customMetadataHas,
            Optional<Double> limit,
            Map<String, Object> additionalProperties) {
        this.userIdentifierKey = userIdentifierKey;
        this.customMetadataHas = customMetadataHas;
        this.limit = limit;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("user_identifier_key")
    public Optional<String> getUserIdentifierKey() {
        return userIdentifierKey;
    }

    /**
     * @return <p>devices where the webview's custom_metadata contains all of the provided key/value pairs.</p>
     */
    @JsonProperty("custom_metadata_has")
    public Optional<Map<String, ConnectWebviewsListRequestCustomMetadataHasValue>> getCustomMetadataHas() {
        return customMetadataHas;
    }

    @JsonProperty("limit")
    public Optional<Double> getLimit() {
        return limit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConnectWebviewsListRequest && equalTo((ConnectWebviewsListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConnectWebviewsListRequest other) {
        return userIdentifierKey.equals(other.userIdentifierKey)
                && customMetadataHas.equals(other.customMetadataHas)
                && limit.equals(other.limit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userIdentifierKey, this.customMetadataHas, this.limit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> userIdentifierKey = Optional.empty();

        private Optional<Map<String, ConnectWebviewsListRequestCustomMetadataHasValue>> customMetadataHas =
                Optional.empty();

        private Optional<Double> limit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConnectWebviewsListRequest other) {
            userIdentifierKey(other.getUserIdentifierKey());
            customMetadataHas(other.getCustomMetadataHas());
            limit(other.getLimit());
            return this;
        }

        @JsonSetter(value = "user_identifier_key", nulls = Nulls.SKIP)
        public Builder userIdentifierKey(Optional<String> userIdentifierKey) {
            this.userIdentifierKey = userIdentifierKey;
            return this;
        }

        public Builder userIdentifierKey(String userIdentifierKey) {
            this.userIdentifierKey = Optional.of(userIdentifierKey);
            return this;
        }

        @JsonSetter(value = "custom_metadata_has", nulls = Nulls.SKIP)
        public Builder customMetadataHas(
                Optional<Map<String, ConnectWebviewsListRequestCustomMetadataHasValue>> customMetadataHas) {
            this.customMetadataHas = customMetadataHas;
            return this;
        }

        public Builder customMetadataHas(
                Map<String, ConnectWebviewsListRequestCustomMetadataHasValue> customMetadataHas) {
            this.customMetadataHas = Optional.of(customMetadataHas);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Double> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Double limit) {
            this.limit = Optional.of(limit);
            return this;
        }

        public ConnectWebviewsListRequest build() {
            return new ConnectWebviewsListRequest(userIdentifierKey, customMetadataHas, limit, additionalProperties);
        }
    }
}
