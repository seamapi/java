/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.webhooks.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = WebhooksUpdateRequest.Builder.class)
public final class WebhooksUpdateRequest {
    private final String webhookId;

    private final List<String> eventTypes;

    private final Map<String, Object> additionalProperties;

    private WebhooksUpdateRequest(String webhookId, List<String> eventTypes, Map<String, Object> additionalProperties) {
        this.webhookId = webhookId;
        this.eventTypes = eventTypes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("webhook_id")
    public String getWebhookId() {
        return webhookId;
    }

    @JsonProperty("event_types")
    public List<String> getEventTypes() {
        return eventTypes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WebhooksUpdateRequest && equalTo((WebhooksUpdateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WebhooksUpdateRequest other) {
        return webhookId.equals(other.webhookId) && eventTypes.equals(other.eventTypes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.webhookId, this.eventTypes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static WebhookIdStage builder() {
        return new Builder();
    }

    public interface WebhookIdStage {
        _FinalStage webhookId(String webhookId);

        Builder from(WebhooksUpdateRequest other);
    }

    public interface _FinalStage {
        WebhooksUpdateRequest build();

        _FinalStage eventTypes(List<String> eventTypes);

        _FinalStage addEventTypes(String eventTypes);

        _FinalStage addAllEventTypes(List<String> eventTypes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements WebhookIdStage, _FinalStage {
        private String webhookId;

        private List<String> eventTypes = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WebhooksUpdateRequest other) {
            webhookId(other.getWebhookId());
            eventTypes(other.getEventTypes());
            return this;
        }

        @java.lang.Override
        @JsonSetter("webhook_id")
        public _FinalStage webhookId(String webhookId) {
            this.webhookId = webhookId;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllEventTypes(List<String> eventTypes) {
            this.eventTypes.addAll(eventTypes);
            return this;
        }

        @java.lang.Override
        public _FinalStage addEventTypes(String eventTypes) {
            this.eventTypes.add(eventTypes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "event_types", nulls = Nulls.SKIP)
        public _FinalStage eventTypes(List<String> eventTypes) {
            this.eventTypes.clear();
            this.eventTypes.addAll(eventTypes);
            return this;
        }

        @java.lang.Override
        public WebhooksUpdateRequest build() {
            return new WebhooksUpdateRequest(webhookId, eventTypes, additionalProperties);
        }
    }
}
