/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.phones.simulate.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import com.seam.api.types.PhoneOperatingSystem;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SimulateCreateSandboxPhoneRequestPhoneMetadata.Builder.class)
public final class SimulateCreateSandboxPhoneRequestPhoneMetadata {
    private final Optional<PhoneOperatingSystem> operatingSystem;

    private final Optional<String> osVersion;

    private final Optional<String> deviceManufacturer;

    private final Optional<String> deviceModel;

    private final Map<String, Object> additionalProperties;

    private SimulateCreateSandboxPhoneRequestPhoneMetadata(
            Optional<PhoneOperatingSystem> operatingSystem,
            Optional<String> osVersion,
            Optional<String> deviceManufacturer,
            Optional<String> deviceModel,
            Map<String, Object> additionalProperties) {
        this.operatingSystem = operatingSystem;
        this.osVersion = osVersion;
        this.deviceManufacturer = deviceManufacturer;
        this.deviceModel = deviceModel;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("operating_system")
    public Optional<PhoneOperatingSystem> getOperatingSystem() {
        return operatingSystem;
    }

    @JsonProperty("os_version")
    public Optional<String> getOsVersion() {
        return osVersion;
    }

    @JsonProperty("device_manufacturer")
    public Optional<String> getDeviceManufacturer() {
        return deviceManufacturer;
    }

    @JsonProperty("device_model")
    public Optional<String> getDeviceModel() {
        return deviceModel;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SimulateCreateSandboxPhoneRequestPhoneMetadata
                && equalTo((SimulateCreateSandboxPhoneRequestPhoneMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SimulateCreateSandboxPhoneRequestPhoneMetadata other) {
        return operatingSystem.equals(other.operatingSystem)
                && osVersion.equals(other.osVersion)
                && deviceManufacturer.equals(other.deviceManufacturer)
                && deviceModel.equals(other.deviceModel);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operatingSystem, this.osVersion, this.deviceManufacturer, this.deviceModel);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PhoneOperatingSystem> operatingSystem = Optional.empty();

        private Optional<String> osVersion = Optional.empty();

        private Optional<String> deviceManufacturer = Optional.empty();

        private Optional<String> deviceModel = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SimulateCreateSandboxPhoneRequestPhoneMetadata other) {
            operatingSystem(other.getOperatingSystem());
            osVersion(other.getOsVersion());
            deviceManufacturer(other.getDeviceManufacturer());
            deviceModel(other.getDeviceModel());
            return this;
        }

        @JsonSetter(value = "operating_system", nulls = Nulls.SKIP)
        public Builder operatingSystem(Optional<PhoneOperatingSystem> operatingSystem) {
            this.operatingSystem = operatingSystem;
            return this;
        }

        public Builder operatingSystem(PhoneOperatingSystem operatingSystem) {
            this.operatingSystem = Optional.of(operatingSystem);
            return this;
        }

        @JsonSetter(value = "os_version", nulls = Nulls.SKIP)
        public Builder osVersion(Optional<String> osVersion) {
            this.osVersion = osVersion;
            return this;
        }

        public Builder osVersion(String osVersion) {
            this.osVersion = Optional.of(osVersion);
            return this;
        }

        @JsonSetter(value = "device_manufacturer", nulls = Nulls.SKIP)
        public Builder deviceManufacturer(Optional<String> deviceManufacturer) {
            this.deviceManufacturer = deviceManufacturer;
            return this;
        }

        public Builder deviceManufacturer(String deviceManufacturer) {
            this.deviceManufacturer = Optional.of(deviceManufacturer);
            return this;
        }

        @JsonSetter(value = "device_model", nulls = Nulls.SKIP)
        public Builder deviceModel(Optional<String> deviceModel) {
            this.deviceModel = deviceModel;
            return this;
        }

        public Builder deviceModel(String deviceModel) {
            this.deviceModel = Optional.of(deviceModel);
            return this;
        }

        public SimulateCreateSandboxPhoneRequestPhoneMetadata build() {
            return new SimulateCreateSandboxPhoneRequestPhoneMetadata(
                    operatingSystem, osVersion, deviceManufacturer, deviceModel, additionalProperties);
        }
    }
}
