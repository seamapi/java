/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.acs.credentials.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CredentialsListRequest.Builder.class)
public final class CredentialsListRequest {
    private final Optional<String> acsUserId;

    private final Optional<String> acsSystemId;

    private final Optional<String> userIdentityId;

    private final Optional<Boolean> isMultiPhoneSyncCredential;

    private final Map<String, Object> additionalProperties;

    private CredentialsListRequest(
            Optional<String> acsUserId,
            Optional<String> acsSystemId,
            Optional<String> userIdentityId,
            Optional<Boolean> isMultiPhoneSyncCredential,
            Map<String, Object> additionalProperties) {
        this.acsUserId = acsUserId;
        this.acsSystemId = acsSystemId;
        this.userIdentityId = userIdentityId;
        this.isMultiPhoneSyncCredential = isMultiPhoneSyncCredential;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("acs_user_id")
    public Optional<String> getAcsUserId() {
        return acsUserId;
    }

    @JsonProperty("acs_system_id")
    public Optional<String> getAcsSystemId() {
        return acsSystemId;
    }

    @JsonProperty("user_identity_id")
    public Optional<String> getUserIdentityId() {
        return userIdentityId;
    }

    @JsonProperty("is_multi_phone_sync_credential")
    public Optional<Boolean> getIsMultiPhoneSyncCredential() {
        return isMultiPhoneSyncCredential;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CredentialsListRequest && equalTo((CredentialsListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CredentialsListRequest other) {
        return acsUserId.equals(other.acsUserId)
                && acsSystemId.equals(other.acsSystemId)
                && userIdentityId.equals(other.userIdentityId)
                && isMultiPhoneSyncCredential.equals(other.isMultiPhoneSyncCredential);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.acsUserId, this.acsSystemId, this.userIdentityId, this.isMultiPhoneSyncCredential);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> acsUserId = Optional.empty();

        private Optional<String> acsSystemId = Optional.empty();

        private Optional<String> userIdentityId = Optional.empty();

        private Optional<Boolean> isMultiPhoneSyncCredential = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CredentialsListRequest other) {
            acsUserId(other.getAcsUserId());
            acsSystemId(other.getAcsSystemId());
            userIdentityId(other.getUserIdentityId());
            isMultiPhoneSyncCredential(other.getIsMultiPhoneSyncCredential());
            return this;
        }

        @JsonSetter(value = "acs_user_id", nulls = Nulls.SKIP)
        public Builder acsUserId(Optional<String> acsUserId) {
            this.acsUserId = acsUserId;
            return this;
        }

        public Builder acsUserId(String acsUserId) {
            this.acsUserId = Optional.of(acsUserId);
            return this;
        }

        @JsonSetter(value = "acs_system_id", nulls = Nulls.SKIP)
        public Builder acsSystemId(Optional<String> acsSystemId) {
            this.acsSystemId = acsSystemId;
            return this;
        }

        public Builder acsSystemId(String acsSystemId) {
            this.acsSystemId = Optional.of(acsSystemId);
            return this;
        }

        @JsonSetter(value = "user_identity_id", nulls = Nulls.SKIP)
        public Builder userIdentityId(Optional<String> userIdentityId) {
            this.userIdentityId = userIdentityId;
            return this;
        }

        public Builder userIdentityId(String userIdentityId) {
            this.userIdentityId = Optional.of(userIdentityId);
            return this;
        }

        @JsonSetter(value = "is_multi_phone_sync_credential", nulls = Nulls.SKIP)
        public Builder isMultiPhoneSyncCredential(Optional<Boolean> isMultiPhoneSyncCredential) {
            this.isMultiPhoneSyncCredential = isMultiPhoneSyncCredential;
            return this;
        }

        public Builder isMultiPhoneSyncCredential(Boolean isMultiPhoneSyncCredential) {
            this.isMultiPhoneSyncCredential = Optional.of(isMultiPhoneSyncCredential);
            return this;
        }

        public CredentialsListRequest build() {
            return new CredentialsListRequest(
                    acsUserId, acsSystemId, userIdentityId, isMultiPhoneSyncCredential, additionalProperties);
        }
    }
}
