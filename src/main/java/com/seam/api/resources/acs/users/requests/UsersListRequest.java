/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.acs.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UsersListRequest.Builder.class)
public final class UsersListRequest {
    private final Optional<String> userIdentityId;

    private final Optional<String> userIdentityPhoneNumber;

    private final Optional<String> userIdentityEmailAddress;

    private final Optional<String> acsSystemId;

    private final Map<String, Object> additionalProperties;

    private UsersListRequest(
            Optional<String> userIdentityId,
            Optional<String> userIdentityPhoneNumber,
            Optional<String> userIdentityEmailAddress,
            Optional<String> acsSystemId,
            Map<String, Object> additionalProperties) {
        this.userIdentityId = userIdentityId;
        this.userIdentityPhoneNumber = userIdentityPhoneNumber;
        this.userIdentityEmailAddress = userIdentityEmailAddress;
        this.acsSystemId = acsSystemId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("user_identity_id")
    public Optional<String> getUserIdentityId() {
        return userIdentityId;
    }

    @JsonProperty("user_identity_phone_number")
    public Optional<String> getUserIdentityPhoneNumber() {
        return userIdentityPhoneNumber;
    }

    @JsonProperty("user_identity_email_address")
    public Optional<String> getUserIdentityEmailAddress() {
        return userIdentityEmailAddress;
    }

    @JsonProperty("acs_system_id")
    public Optional<String> getAcsSystemId() {
        return acsSystemId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UsersListRequest && equalTo((UsersListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UsersListRequest other) {
        return userIdentityId.equals(other.userIdentityId)
                && userIdentityPhoneNumber.equals(other.userIdentityPhoneNumber)
                && userIdentityEmailAddress.equals(other.userIdentityEmailAddress)
                && acsSystemId.equals(other.acsSystemId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.userIdentityId, this.userIdentityPhoneNumber, this.userIdentityEmailAddress, this.acsSystemId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> userIdentityId = Optional.empty();

        private Optional<String> userIdentityPhoneNumber = Optional.empty();

        private Optional<String> userIdentityEmailAddress = Optional.empty();

        private Optional<String> acsSystemId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UsersListRequest other) {
            userIdentityId(other.getUserIdentityId());
            userIdentityPhoneNumber(other.getUserIdentityPhoneNumber());
            userIdentityEmailAddress(other.getUserIdentityEmailAddress());
            acsSystemId(other.getAcsSystemId());
            return this;
        }

        @JsonSetter(value = "user_identity_id", nulls = Nulls.SKIP)
        public Builder userIdentityId(Optional<String> userIdentityId) {
            this.userIdentityId = userIdentityId;
            return this;
        }

        public Builder userIdentityId(String userIdentityId) {
            this.userIdentityId = Optional.of(userIdentityId);
            return this;
        }

        @JsonSetter(value = "user_identity_phone_number", nulls = Nulls.SKIP)
        public Builder userIdentityPhoneNumber(Optional<String> userIdentityPhoneNumber) {
            this.userIdentityPhoneNumber = userIdentityPhoneNumber;
            return this;
        }

        public Builder userIdentityPhoneNumber(String userIdentityPhoneNumber) {
            this.userIdentityPhoneNumber = Optional.of(userIdentityPhoneNumber);
            return this;
        }

        @JsonSetter(value = "user_identity_email_address", nulls = Nulls.SKIP)
        public Builder userIdentityEmailAddress(Optional<String> userIdentityEmailAddress) {
            this.userIdentityEmailAddress = userIdentityEmailAddress;
            return this;
        }

        public Builder userIdentityEmailAddress(String userIdentityEmailAddress) {
            this.userIdentityEmailAddress = Optional.of(userIdentityEmailAddress);
            return this;
        }

        @JsonSetter(value = "acs_system_id", nulls = Nulls.SKIP)
        public Builder acsSystemId(Optional<String> acsSystemId) {
            this.acsSystemId = acsSystemId;
            return this;
        }

        public Builder acsSystemId(String acsSystemId) {
            this.acsSystemId = Optional.of(acsSystemId);
            return this;
        }

        public UsersListRequest build() {
            return new UsersListRequest(
                    userIdentityId,
                    userIdentityPhoneNumber,
                    userIdentityEmailAddress,
                    acsSystemId,
                    additionalProperties);
        }
    }
}
