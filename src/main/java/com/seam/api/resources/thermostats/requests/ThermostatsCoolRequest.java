/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.thermostats.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ThermostatsCoolRequest.Builder.class)
public final class ThermostatsCoolRequest {
    private final String deviceId;

    private final Optional<Double> coolingSetPointCelsius;

    private final Optional<Double> coolingSetPointFahrenheit;

    private final Optional<Boolean> sync;

    private final Map<String, Object> additionalProperties;

    private ThermostatsCoolRequest(
            String deviceId,
            Optional<Double> coolingSetPointCelsius,
            Optional<Double> coolingSetPointFahrenheit,
            Optional<Boolean> sync,
            Map<String, Object> additionalProperties) {
        this.deviceId = deviceId;
        this.coolingSetPointCelsius = coolingSetPointCelsius;
        this.coolingSetPointFahrenheit = coolingSetPointFahrenheit;
        this.sync = sync;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("device_id")
    public String getDeviceId() {
        return deviceId;
    }

    @JsonProperty("cooling_set_point_celsius")
    public Optional<Double> getCoolingSetPointCelsius() {
        return coolingSetPointCelsius;
    }

    @JsonProperty("cooling_set_point_fahrenheit")
    public Optional<Double> getCoolingSetPointFahrenheit() {
        return coolingSetPointFahrenheit;
    }

    @JsonProperty("sync")
    public Optional<Boolean> getSync() {
        return sync;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ThermostatsCoolRequest && equalTo((ThermostatsCoolRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ThermostatsCoolRequest other) {
        return deviceId.equals(other.deviceId)
                && coolingSetPointCelsius.equals(other.coolingSetPointCelsius)
                && coolingSetPointFahrenheit.equals(other.coolingSetPointFahrenheit)
                && sync.equals(other.sync);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.deviceId, this.coolingSetPointCelsius, this.coolingSetPointFahrenheit, this.sync);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DeviceIdStage builder() {
        return new Builder();
    }

    public interface DeviceIdStage {
        _FinalStage deviceId(String deviceId);

        Builder from(ThermostatsCoolRequest other);
    }

    public interface _FinalStage {
        ThermostatsCoolRequest build();

        _FinalStage coolingSetPointCelsius(Optional<Double> coolingSetPointCelsius);

        _FinalStage coolingSetPointCelsius(Double coolingSetPointCelsius);

        _FinalStage coolingSetPointFahrenheit(Optional<Double> coolingSetPointFahrenheit);

        _FinalStage coolingSetPointFahrenheit(Double coolingSetPointFahrenheit);

        _FinalStage sync(Optional<Boolean> sync);

        _FinalStage sync(Boolean sync);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DeviceIdStage, _FinalStage {
        private String deviceId;

        private Optional<Boolean> sync = Optional.empty();

        private Optional<Double> coolingSetPointFahrenheit = Optional.empty();

        private Optional<Double> coolingSetPointCelsius = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ThermostatsCoolRequest other) {
            deviceId(other.getDeviceId());
            coolingSetPointCelsius(other.getCoolingSetPointCelsius());
            coolingSetPointFahrenheit(other.getCoolingSetPointFahrenheit());
            sync(other.getSync());
            return this;
        }

        @java.lang.Override
        @JsonSetter("device_id")
        public _FinalStage deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage sync(Boolean sync) {
            this.sync = Optional.of(sync);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sync", nulls = Nulls.SKIP)
        public _FinalStage sync(Optional<Boolean> sync) {
            this.sync = sync;
            return this;
        }

        @java.lang.Override
        public _FinalStage coolingSetPointFahrenheit(Double coolingSetPointFahrenheit) {
            this.coolingSetPointFahrenheit = Optional.of(coolingSetPointFahrenheit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cooling_set_point_fahrenheit", nulls = Nulls.SKIP)
        public _FinalStage coolingSetPointFahrenheit(Optional<Double> coolingSetPointFahrenheit) {
            this.coolingSetPointFahrenheit = coolingSetPointFahrenheit;
            return this;
        }

        @java.lang.Override
        public _FinalStage coolingSetPointCelsius(Double coolingSetPointCelsius) {
            this.coolingSetPointCelsius = Optional.of(coolingSetPointCelsius);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cooling_set_point_celsius", nulls = Nulls.SKIP)
        public _FinalStage coolingSetPointCelsius(Optional<Double> coolingSetPointCelsius) {
            this.coolingSetPointCelsius = coolingSetPointCelsius;
            return this;
        }

        @java.lang.Override
        public ThermostatsCoolRequest build() {
            return new ThermostatsCoolRequest(
                    deviceId, coolingSetPointCelsius, coolingSetPointFahrenheit, sync, additionalProperties);
        }
    }
}
