/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seam.api.resources.thermostats.climatesettingschedules.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seam.api.core.ObjectMappers;
import com.seam.api.resources.thermostats.climatesettingschedules.types.ClimateSettingSchedulesCreateRequestHvacModeSetting;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClimateSettingSchedulesCreateRequest.Builder.class)
public final class ClimateSettingSchedulesCreateRequest {
    private final Optional<String> scheduleType;

    private final String deviceId;

    private final Optional<String> name;

    private final String scheduleStartsAt;

    private final String scheduleEndsAt;

    private final Optional<Boolean> automaticHeatingEnabled;

    private final Optional<Boolean> automaticCoolingEnabled;

    private final Optional<ClimateSettingSchedulesCreateRequestHvacModeSetting> hvacModeSetting;

    private final Optional<Double> coolingSetPointCelsius;

    private final Optional<Double> heatingSetPointCelsius;

    private final Optional<Double> coolingSetPointFahrenheit;

    private final Optional<Double> heatingSetPointFahrenheit;

    private final Optional<Boolean> manualOverrideAllowed;

    private final Map<String, Object> additionalProperties;

    private ClimateSettingSchedulesCreateRequest(
            Optional<String> scheduleType,
            String deviceId,
            Optional<String> name,
            String scheduleStartsAt,
            String scheduleEndsAt,
            Optional<Boolean> automaticHeatingEnabled,
            Optional<Boolean> automaticCoolingEnabled,
            Optional<ClimateSettingSchedulesCreateRequestHvacModeSetting> hvacModeSetting,
            Optional<Double> coolingSetPointCelsius,
            Optional<Double> heatingSetPointCelsius,
            Optional<Double> coolingSetPointFahrenheit,
            Optional<Double> heatingSetPointFahrenheit,
            Optional<Boolean> manualOverrideAllowed,
            Map<String, Object> additionalProperties) {
        this.scheduleType = scheduleType;
        this.deviceId = deviceId;
        this.name = name;
        this.scheduleStartsAt = scheduleStartsAt;
        this.scheduleEndsAt = scheduleEndsAt;
        this.automaticHeatingEnabled = automaticHeatingEnabled;
        this.automaticCoolingEnabled = automaticCoolingEnabled;
        this.hvacModeSetting = hvacModeSetting;
        this.coolingSetPointCelsius = coolingSetPointCelsius;
        this.heatingSetPointCelsius = heatingSetPointCelsius;
        this.coolingSetPointFahrenheit = coolingSetPointFahrenheit;
        this.heatingSetPointFahrenheit = heatingSetPointFahrenheit;
        this.manualOverrideAllowed = manualOverrideAllowed;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("schedule_type")
    public Optional<String> getScheduleType() {
        return scheduleType;
    }

    @JsonProperty("device_id")
    public String getDeviceId() {
        return deviceId;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("schedule_starts_at")
    public String getScheduleStartsAt() {
        return scheduleStartsAt;
    }

    @JsonProperty("schedule_ends_at")
    public String getScheduleEndsAt() {
        return scheduleEndsAt;
    }

    @JsonProperty("automatic_heating_enabled")
    public Optional<Boolean> getAutomaticHeatingEnabled() {
        return automaticHeatingEnabled;
    }

    @JsonProperty("automatic_cooling_enabled")
    public Optional<Boolean> getAutomaticCoolingEnabled() {
        return automaticCoolingEnabled;
    }

    @JsonProperty("hvac_mode_setting")
    public Optional<ClimateSettingSchedulesCreateRequestHvacModeSetting> getHvacModeSetting() {
        return hvacModeSetting;
    }

    @JsonProperty("cooling_set_point_celsius")
    public Optional<Double> getCoolingSetPointCelsius() {
        return coolingSetPointCelsius;
    }

    @JsonProperty("heating_set_point_celsius")
    public Optional<Double> getHeatingSetPointCelsius() {
        return heatingSetPointCelsius;
    }

    @JsonProperty("cooling_set_point_fahrenheit")
    public Optional<Double> getCoolingSetPointFahrenheit() {
        return coolingSetPointFahrenheit;
    }

    @JsonProperty("heating_set_point_fahrenheit")
    public Optional<Double> getHeatingSetPointFahrenheit() {
        return heatingSetPointFahrenheit;
    }

    @JsonProperty("manual_override_allowed")
    public Optional<Boolean> getManualOverrideAllowed() {
        return manualOverrideAllowed;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClimateSettingSchedulesCreateRequest
                && equalTo((ClimateSettingSchedulesCreateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClimateSettingSchedulesCreateRequest other) {
        return scheduleType.equals(other.scheduleType)
                && deviceId.equals(other.deviceId)
                && name.equals(other.name)
                && scheduleStartsAt.equals(other.scheduleStartsAt)
                && scheduleEndsAt.equals(other.scheduleEndsAt)
                && automaticHeatingEnabled.equals(other.automaticHeatingEnabled)
                && automaticCoolingEnabled.equals(other.automaticCoolingEnabled)
                && hvacModeSetting.equals(other.hvacModeSetting)
                && coolingSetPointCelsius.equals(other.coolingSetPointCelsius)
                && heatingSetPointCelsius.equals(other.heatingSetPointCelsius)
                && coolingSetPointFahrenheit.equals(other.coolingSetPointFahrenheit)
                && heatingSetPointFahrenheit.equals(other.heatingSetPointFahrenheit)
                && manualOverrideAllowed.equals(other.manualOverrideAllowed);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.scheduleType,
                this.deviceId,
                this.name,
                this.scheduleStartsAt,
                this.scheduleEndsAt,
                this.automaticHeatingEnabled,
                this.automaticCoolingEnabled,
                this.hvacModeSetting,
                this.coolingSetPointCelsius,
                this.heatingSetPointCelsius,
                this.coolingSetPointFahrenheit,
                this.heatingSetPointFahrenheit,
                this.manualOverrideAllowed);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DeviceIdStage builder() {
        return new Builder();
    }

    public interface DeviceIdStage {
        ScheduleStartsAtStage deviceId(String deviceId);

        Builder from(ClimateSettingSchedulesCreateRequest other);
    }

    public interface ScheduleStartsAtStage {
        ScheduleEndsAtStage scheduleStartsAt(String scheduleStartsAt);
    }

    public interface ScheduleEndsAtStage {
        _FinalStage scheduleEndsAt(String scheduleEndsAt);
    }

    public interface _FinalStage {
        ClimateSettingSchedulesCreateRequest build();

        _FinalStage scheduleType(Optional<String> scheduleType);

        _FinalStage scheduleType(String scheduleType);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage automaticHeatingEnabled(Optional<Boolean> automaticHeatingEnabled);

        _FinalStage automaticHeatingEnabled(Boolean automaticHeatingEnabled);

        _FinalStage automaticCoolingEnabled(Optional<Boolean> automaticCoolingEnabled);

        _FinalStage automaticCoolingEnabled(Boolean automaticCoolingEnabled);

        _FinalStage hvacModeSetting(Optional<ClimateSettingSchedulesCreateRequestHvacModeSetting> hvacModeSetting);

        _FinalStage hvacModeSetting(ClimateSettingSchedulesCreateRequestHvacModeSetting hvacModeSetting);

        _FinalStage coolingSetPointCelsius(Optional<Double> coolingSetPointCelsius);

        _FinalStage coolingSetPointCelsius(Double coolingSetPointCelsius);

        _FinalStage heatingSetPointCelsius(Optional<Double> heatingSetPointCelsius);

        _FinalStage heatingSetPointCelsius(Double heatingSetPointCelsius);

        _FinalStage coolingSetPointFahrenheit(Optional<Double> coolingSetPointFahrenheit);

        _FinalStage coolingSetPointFahrenheit(Double coolingSetPointFahrenheit);

        _FinalStage heatingSetPointFahrenheit(Optional<Double> heatingSetPointFahrenheit);

        _FinalStage heatingSetPointFahrenheit(Double heatingSetPointFahrenheit);

        _FinalStage manualOverrideAllowed(Optional<Boolean> manualOverrideAllowed);

        _FinalStage manualOverrideAllowed(Boolean manualOverrideAllowed);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements DeviceIdStage, ScheduleStartsAtStage, ScheduleEndsAtStage, _FinalStage {
        private String deviceId;

        private String scheduleStartsAt;

        private String scheduleEndsAt;

        private Optional<Boolean> manualOverrideAllowed = Optional.empty();

        private Optional<Double> heatingSetPointFahrenheit = Optional.empty();

        private Optional<Double> coolingSetPointFahrenheit = Optional.empty();

        private Optional<Double> heatingSetPointCelsius = Optional.empty();

        private Optional<Double> coolingSetPointCelsius = Optional.empty();

        private Optional<ClimateSettingSchedulesCreateRequestHvacModeSetting> hvacModeSetting = Optional.empty();

        private Optional<Boolean> automaticCoolingEnabled = Optional.empty();

        private Optional<Boolean> automaticHeatingEnabled = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> scheduleType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClimateSettingSchedulesCreateRequest other) {
            scheduleType(other.getScheduleType());
            deviceId(other.getDeviceId());
            name(other.getName());
            scheduleStartsAt(other.getScheduleStartsAt());
            scheduleEndsAt(other.getScheduleEndsAt());
            automaticHeatingEnabled(other.getAutomaticHeatingEnabled());
            automaticCoolingEnabled(other.getAutomaticCoolingEnabled());
            hvacModeSetting(other.getHvacModeSetting());
            coolingSetPointCelsius(other.getCoolingSetPointCelsius());
            heatingSetPointCelsius(other.getHeatingSetPointCelsius());
            coolingSetPointFahrenheit(other.getCoolingSetPointFahrenheit());
            heatingSetPointFahrenheit(other.getHeatingSetPointFahrenheit());
            manualOverrideAllowed(other.getManualOverrideAllowed());
            return this;
        }

        @java.lang.Override
        @JsonSetter("device_id")
        public ScheduleStartsAtStage deviceId(String deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("schedule_starts_at")
        public ScheduleEndsAtStage scheduleStartsAt(String scheduleStartsAt) {
            this.scheduleStartsAt = scheduleStartsAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("schedule_ends_at")
        public _FinalStage scheduleEndsAt(String scheduleEndsAt) {
            this.scheduleEndsAt = scheduleEndsAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage manualOverrideAllowed(Boolean manualOverrideAllowed) {
            this.manualOverrideAllowed = Optional.of(manualOverrideAllowed);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "manual_override_allowed", nulls = Nulls.SKIP)
        public _FinalStage manualOverrideAllowed(Optional<Boolean> manualOverrideAllowed) {
            this.manualOverrideAllowed = manualOverrideAllowed;
            return this;
        }

        @java.lang.Override
        public _FinalStage heatingSetPointFahrenheit(Double heatingSetPointFahrenheit) {
            this.heatingSetPointFahrenheit = Optional.of(heatingSetPointFahrenheit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "heating_set_point_fahrenheit", nulls = Nulls.SKIP)
        public _FinalStage heatingSetPointFahrenheit(Optional<Double> heatingSetPointFahrenheit) {
            this.heatingSetPointFahrenheit = heatingSetPointFahrenheit;
            return this;
        }

        @java.lang.Override
        public _FinalStage coolingSetPointFahrenheit(Double coolingSetPointFahrenheit) {
            this.coolingSetPointFahrenheit = Optional.of(coolingSetPointFahrenheit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cooling_set_point_fahrenheit", nulls = Nulls.SKIP)
        public _FinalStage coolingSetPointFahrenheit(Optional<Double> coolingSetPointFahrenheit) {
            this.coolingSetPointFahrenheit = coolingSetPointFahrenheit;
            return this;
        }

        @java.lang.Override
        public _FinalStage heatingSetPointCelsius(Double heatingSetPointCelsius) {
            this.heatingSetPointCelsius = Optional.of(heatingSetPointCelsius);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "heating_set_point_celsius", nulls = Nulls.SKIP)
        public _FinalStage heatingSetPointCelsius(Optional<Double> heatingSetPointCelsius) {
            this.heatingSetPointCelsius = heatingSetPointCelsius;
            return this;
        }

        @java.lang.Override
        public _FinalStage coolingSetPointCelsius(Double coolingSetPointCelsius) {
            this.coolingSetPointCelsius = Optional.of(coolingSetPointCelsius);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cooling_set_point_celsius", nulls = Nulls.SKIP)
        public _FinalStage coolingSetPointCelsius(Optional<Double> coolingSetPointCelsius) {
            this.coolingSetPointCelsius = coolingSetPointCelsius;
            return this;
        }

        @java.lang.Override
        public _FinalStage hvacModeSetting(ClimateSettingSchedulesCreateRequestHvacModeSetting hvacModeSetting) {
            this.hvacModeSetting = Optional.of(hvacModeSetting);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hvac_mode_setting", nulls = Nulls.SKIP)
        public _FinalStage hvacModeSetting(
                Optional<ClimateSettingSchedulesCreateRequestHvacModeSetting> hvacModeSetting) {
            this.hvacModeSetting = hvacModeSetting;
            return this;
        }

        @java.lang.Override
        public _FinalStage automaticCoolingEnabled(Boolean automaticCoolingEnabled) {
            this.automaticCoolingEnabled = Optional.of(automaticCoolingEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "automatic_cooling_enabled", nulls = Nulls.SKIP)
        public _FinalStage automaticCoolingEnabled(Optional<Boolean> automaticCoolingEnabled) {
            this.automaticCoolingEnabled = automaticCoolingEnabled;
            return this;
        }

        @java.lang.Override
        public _FinalStage automaticHeatingEnabled(Boolean automaticHeatingEnabled) {
            this.automaticHeatingEnabled = Optional.of(automaticHeatingEnabled);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "automatic_heating_enabled", nulls = Nulls.SKIP)
        public _FinalStage automaticHeatingEnabled(Optional<Boolean> automaticHeatingEnabled) {
            this.automaticHeatingEnabled = automaticHeatingEnabled;
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public _FinalStage scheduleType(String scheduleType) {
            this.scheduleType = Optional.of(scheduleType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "schedule_type", nulls = Nulls.SKIP)
        public _FinalStage scheduleType(Optional<String> scheduleType) {
            this.scheduleType = scheduleType;
            return this;
        }

        @java.lang.Override
        public ClimateSettingSchedulesCreateRequest build() {
            return new ClimateSettingSchedulesCreateRequest(
                    scheduleType,
                    deviceId,
                    name,
                    scheduleStartsAt,
                    scheduleEndsAt,
                    automaticHeatingEnabled,
                    automaticCoolingEnabled,
                    hvacModeSetting,
                    coolingSetPointCelsius,
                    heatingSetPointCelsius,
                    coolingSetPointFahrenheit,
                    heatingSetPointFahrenheit,
                    manualOverrideAllowed,
                    additionalProperties);
        }
    }
}
